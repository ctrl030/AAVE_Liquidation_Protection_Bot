// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package repayment

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RepaymentABI is the input ABI used to generate the binding from.
const RepaymentABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contractILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contractILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sDebtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vDebtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_packed\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_oneInchCalldata\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RepaymentBin is the compiled bytecode used for deploying new contracts.
var RepaymentBin = "0x60e06040523480156200001157600080fd5b5073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050737d2768de32b0b80b7a3454c06bdac94a69ddc7a973ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060004690506200017d60405180608001604052806040518060400160405280601f81526020017f41415645204c69717569646174696f6e2050726f74656374696f6e20426f740081525081526020016040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081526020018381526020016040518060400160405280602081526020017f5355254e36676d756d766a2e417b40422c536457587456676728426f663953418152508152506200018b60201b60201c565b60c08181525050506200029d565b60007f613742be5859fb0eadf208d5acbaea935189bb3cdb9686525166ede1daab2eb98260000151805190602001208360200151805190602001208460400151856060015180519060200120604051602001620001ed9594939291906200022c565b604051602081830303815290604052805190602001209050919050565b620002158162000289565b82525050565b620002268162000293565b82525050565b600060a0820190506200024360008301886200020a565b6200025260208301876200020a565b6200026160408301866200020a565b6200027060608301856200021b565b6200027f60808301846200020a565b9695505050505050565b6000819050919050565b6000819050919050565b60805160601c60a05160601c60c0516122c8620002e360003980610bf55250806104325280610646528061073052806109025280610bcf52508060db52506122c86000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630542975c1461005157806354f5c2c81461006f578063920f5c841461008b578063b4dcfc77146100bb575b600080fd5b6100596100d9565b6040516100669190611e25565b60405180910390f35b610089600480360381019061008491906112f7565b6100fd565b005b6100a560048036038101906100a091906113dd565b6104d6565b6040516100b29190611d9c565b60405180910390f35b6100c3610bcd565b6040516100d09190611e40565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6101078787610bf1565b6000606060008673ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b81526004016101469190611bd5565b60206040518083038186803b15801561015e57600080fd5b505afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610196919061152f565b905060008873ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b81526004016101d39190611bd5565b60206040518083038186803b1580156101eb57600080fd5b505afa1580156101ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610223919061152f565b905060008282011161026a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026190611f7b565b60405180910390fd5b81810193506040518060a001604052808c73ffffffffffffffffffffffffffffffffffffffff168152602001828152602001838152602001878152602001868152506040516020016102bc9190611f9b565b604051602081830303815290604052925050506060600167ffffffffffffffff811180156102e957600080fd5b506040519080825280602002602001820160405280156103185781602001602082028036833780820191505090505b509050858160008151811061032957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506060600167ffffffffffffffff8111801561037d57600080fd5b506040519080825280602002602001820160405280156103ac5781602001602082028036833780820191505090505b50905083816000815181106103bd57fe5b6020026020010181815250506060600167ffffffffffffffff811180156103e357600080fd5b506040519080825280602002602001820160405280156104125781602001602082028036833780820191505090505b50905060008160008151811061042457fe5b6020026020010181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d30858585308a60006040518863ffffffff1660e01b81526004016104969796959493929190611c27565b600060405180830381600087803b1580156104b057600080fd5b505af11580156104c4573d6000803e3d6000fd5b50505050505050505050505050505050565b60006104e0610fe7565b83838101906104ef91906114ee565b905060008b8b600081811061050057fe5b9050602002016020810190610515919061127f565b905060008888600081811061052657fe5b905060200201358b8b600081811061053a57fe5b905060200201350190508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737d2768de32b0b80b7a3454c06bdac94a69ddc7a98d8d600081811061058257fe5b905060200201356040518363ffffffff1660e01b81526004016105a6929190611cb2565b602060405180830381600087803b1580156105c057600080fd5b505af11580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f891906114c5565b610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e90611efb565b60405180910390fd5b600083602001511115610721577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663573ade818e8e600081811061068d57fe5b90506020020160208101906106a2919061127f565b8560200151600187600001516040518563ffffffff1660e01b81526004016106cd9493929190611d12565b602060405180830381600087803b1580156106e757600080fd5b505af11580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f919061152f565b505b60008360400151111561080b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663573ade818e8e600081811061077757fe5b905060200201602081019061078c919061127f565b8560400151600287600001516040518563ffffffff1660e01b81526004016107b79493929190611d57565b602060405180830381600087803b1580156107d157600080fd5b505af11580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610809919061152f565b505b6000806000856060015180602001905181019061082891906112a8565b9250925092508273ffffffffffffffffffffffffffffffffffffffff166323b872dd876000015130846040518463ffffffff1660e01b815260040161086f93929190611bf0565b602060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c191906114c5565b610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790611ebb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166369328dec8383306040518463ffffffff1660e01b815260040161095d93929190611cdb565b602060405180830381600087803b15801561097757600080fd5b505af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af919061152f565b81146109f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e790611e9b565b60405180910390fd5b6000610a0183838960800151610ce6565b90508573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88600001518784036040518363ffffffff1660e01b8152600401610a44929190611cb2565b602060405180830381600087803b158015610a5e57600080fd5b505af1158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9691906114c5565b610ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acc90611edb565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737d2768de32b0b80b7a3454c06bdac94a69ddc7a9876040518363ffffffff1660e01b8152600401610b24929190611cb2565b602060405180830381600087803b158015610b3e57600080fd5b505af1158015610b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7691906114c5565b610bb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bac90611e7b565b60405180910390fd5b60019750505050505050509998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000610c4160405180602001604052803373ffffffffffffffffffffffffffffffffffffffff16815250610e6d565b604051602001610c52929190611b9e565b6040516020818303038152906040528051906020012090508273ffffffffffffffffffffffffffffffffffffffff16610c8b8284610ec3565b73ffffffffffffffffffffffffffffffffffffffff1614610ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd890611f3b565b60405180910390fd5b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663095ea7b373111111125434b319222cdbf8c261674adb56f3ae856040518363ffffffff1660e01b8152600401610d37929190611cb2565b602060405180830381600087803b158015610d5157600080fd5b505af1158015610d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8991906114c5565b506000606073111111125434b319222cdbf8c261674adb56f3ae73ffffffffffffffffffffffffffffffffffffffff1684604051610dc79190611b87565b6000604051808303816000865af19150503d8060008114610e04576040519150601f19603f3d011682016040523d82523d6000602084013e610e09565b606091505b509150915081610e4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4590611f1b565b60405180910390fd5b80806020019051810190610e62919061152f565b925050509392505050565b60007f5acce4118754599ab021c0a0f4b08f773105fab742d49f4198d03607f2968c298260000151604051602001610ea6929190611db7565b604051602081830303815290604052805190602001209050919050565b60006041825114610f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0090611f5b565b60405180910390fd5b60008060006020850151925060408501519150606085015160001a9050601b8160ff161015610f3957601b810190505b601b8160ff161480610f4e5750601c8160ff16145b610f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8490611e5b565b60405180910390fd5b60018682858560405160008152602001604052604051610fb09493929190611de0565b6020604051602081039080840390855afa158015610fd2573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160608152602001606081525090565b60008135905061103b81612236565b92915050565b6000815190506110508161224d565b92915050565b60008083601f84011261106857600080fd5b8235905067ffffffffffffffff81111561108157600080fd5b60208301915083602082028301111561109957600080fd5b9250929050565b60008083601f8401126110b257600080fd5b8235905067ffffffffffffffff8111156110cb57600080fd5b6020830191508360208202830111156110e357600080fd5b9250929050565b6000815190506110f981612264565b92915050565b60008083601f84011261111157600080fd5b8235905067ffffffffffffffff81111561112a57600080fd5b60208301915083600182028301111561114257600080fd5b9250929050565b600082601f83011261115a57600080fd5b813561116d61116882611fea565b611fbd565b9150808252602083016020830185838301111561118957600080fd5b6111948382846121d9565b50505092915050565b600060a082840312156111af57600080fd5b6111b960a0611fbd565b905060006111c98482850161102c565b60008301525060206111dd84828501611255565b60208301525060406111f184828501611255565b604083015250606082013567ffffffffffffffff81111561121157600080fd5b61121d84828501611149565b606083015250608082013567ffffffffffffffff81111561123d57600080fd5b61124984828501611149565b60808301525092915050565b6000813590506112648161227b565b92915050565b6000815190506112798161227b565b92915050565b60006020828403121561129157600080fd5b600061129f8482850161102c565b91505092915050565b6000806000606084860312156112bd57600080fd5b60006112cb86828701611041565b93505060206112dc86828701611041565b92505060406112ed8682870161126a565b9150509250925092565b600080600080600080600060e0888a03121561131257600080fd5b60006113208a828b0161102c565b975050602088013567ffffffffffffffff81111561133d57600080fd5b6113498a828b01611149565b965050604061135a8a828b0161102c565b955050606061136b8a828b0161102c565b945050608061137c8a828b0161102c565b93505060a088013567ffffffffffffffff81111561139957600080fd5b6113a58a828b01611149565b92505060c088013567ffffffffffffffff8111156113c257600080fd5b6113ce8a828b01611149565b91505092959891949750929550565b600080600080600080600080600060a08a8c0312156113fb57600080fd5b60008a013567ffffffffffffffff81111561141557600080fd5b6114218c828d01611056565b995099505060208a013567ffffffffffffffff81111561144057600080fd5b61144c8c828d016110a0565b975097505060408a013567ffffffffffffffff81111561146b57600080fd5b6114778c828d016110a0565b9550955050606061148a8c828d0161102c565b93505060808a013567ffffffffffffffff8111156114a757600080fd5b6114b38c828d016110ff565b92509250509295985092959850929598565b6000602082840312156114d757600080fd5b60006114e5848285016110ea565b91505092915050565b60006020828403121561150057600080fd5b600082013567ffffffffffffffff81111561151a57600080fd5b6115268482850161119d565b91505092915050565b60006020828403121561154157600080fd5b600061154f8482850161126a565b91505092915050565b60006115648383611588565b60208301905092915050565b600061157c8383611b5a565b60208301905092915050565b611591816120dc565b82525050565b6115a0816120dc565b82525050565b60006115b182612036565b6115bb8185612071565b93506115c683612016565b8060005b838110156115f75781516115de8882611558565b97506115e983612057565b9250506001810190506115ca565b5085935050505092915050565b600061160f82612041565b6116198185612082565b935061162483612026565b8060005b8381101561165557815161163c8882611570565b975061164783612064565b925050600181019050611628565b5085935050505092915050565b61166b81612100565b82525050565b61167a8161210c565b82525050565b61169161168c8261210c565b61221b565b82525050565b60006116a28261204c565b6116ac8185612093565b93506116bc8185602086016121e8565b6116c581612225565b840191505092915050565b60006116db8261204c565b6116e581856120a4565b93506116f58185602086016121e8565b6116fe81612225565b840191505092915050565b60006117148261204c565b61171e81856120b5565b935061172e8185602086016121e8565b80840191505092915050565b6117438161215b565b82525050565b6117528161217f565b82525050565b611761816121a3565b82525050565b611770816121b5565b82525050565b61177f816121c7565b82525050565b60006117926002836120d1565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006117d26012836120c0565b91507f7620776173206e6f74203237206f7220323800000000000000000000000000006000830152602082019050919050565b60006118126026836120c0565b91507f6661696c656420746f20617070726f766520666c617368206c6f616e2072657060008301527f61796d656e7400000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118786026836120c0565b91507f7769746864726577206c657373207468616e207468652065787065637465642060008301527f616d6f756e7400000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118de601a836120c0565b91507f636f6c6c61746572616c207472616e73666572206661696c65640000000000006000830152602082019050919050565b600061191e6025836120c0565b91507f7472616e7366657272696e672072656d61696e64657220746f2075736572206660008301527f61696c65640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006119846022836120c0565b91507f6661696c656420746f20617070726f766520746865206c656e64696e6720706f60008301527f6f6c0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006119ea6011836120c0565b91507f31696e63682073776170206661696c65640000000000000000000000000000006000830152602082019050919050565b6000611a2a6014836120c0565b91507f7369676e657220646964206e6f74206d617463680000000000000000000000006000830152602082019050919050565b6000611a6a6016836120c0565b91507f77726f6e67207369676e6174757265206c656e677468000000000000000000006000830152602082019050919050565b6000611aaa600e836120c0565b91507f64656274206e6f7420666f756e640000000000000000000000000000000000006000830152602082019050919050565b600060a083016000830151611af56000860182611588565b506020830151611b086020860182611b5a565b506040830151611b1b6040860182611b5a565b5060608301518482036060860152611b338282611697565b91505060808301518482036080860152611b4d8282611697565b9150508091505092915050565b611b6381612144565b82525050565b611b7281612144565b82525050565b611b818161214e565b82525050565b6000611b938284611709565b915081905092915050565b6000611ba982611785565b9150611bb58285611680565b602082019150611bc58284611680565b6020820191508190509392505050565b6000602082019050611bea6000830184611597565b92915050565b6000606082019050611c056000830186611597565b611c126020830185611597565b611c1f6040830184611b69565b949350505050565b600060e082019050611c3c600083018a611597565b8181036020830152611c4e81896115a6565b90508181036040830152611c628188611604565b90508181036060830152611c768187611604565b9050611c856080830186611597565b81810360a0830152611c9781856116d0565b9050611ca660c0830184611758565b98975050505050505050565b6000604082019050611cc76000830185611597565b611cd46020830184611b69565b9392505050565b6000606082019050611cf06000830186611597565b611cfd6020830185611b69565b611d0a6040830184611597565b949350505050565b6000608082019050611d276000830187611597565b611d346020830186611b69565b611d416040830185611767565b611d4e6060830184611597565b95945050505050565b6000608082019050611d6c6000830187611597565b611d796020830186611b69565b611d866040830185611776565b611d936060830184611597565b95945050505050565b6000602082019050611db16000830184611662565b92915050565b6000604082019050611dcc6000830185611671565b611dd96020830184611597565b9392505050565b6000608082019050611df56000830187611671565b611e026020830186611b78565b611e0f6040830185611671565b611e1c6060830184611671565b95945050505050565b6000602082019050611e3a600083018461173a565b92915050565b6000602082019050611e556000830184611749565b92915050565b60006020820190508181036000830152611e74816117c5565b9050919050565b60006020820190508181036000830152611e9481611805565b9050919050565b60006020820190508181036000830152611eb48161186b565b9050919050565b60006020820190508181036000830152611ed4816118d1565b9050919050565b60006020820190508181036000830152611ef481611911565b9050919050565b60006020820190508181036000830152611f1481611977565b9050919050565b60006020820190508181036000830152611f34816119dd565b9050919050565b60006020820190508181036000830152611f5481611a1d565b9050919050565b60006020820190508181036000830152611f7481611a5d565b9050919050565b60006020820190508181036000830152611f9481611a9d565b9050919050565b60006020820190508181036000830152611fb58184611add565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611fe057600080fd5b8060405250919050565b600067ffffffffffffffff82111561200157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006120e782612124565b9050919050565b60006120f982612124565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006121668261216d565b9050919050565b600061217882612124565b9050919050565b600061218a82612191565b9050919050565b600061219c82612124565b9050919050565b60006121ae82612116565b9050919050565b60006121c082612144565b9050919050565b60006121d282612144565b9050919050565b82818337600083830152505050565b60005b838110156122065780820151818401526020810190506121eb565b83811115612215576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b61223f816120dc565b811461224a57600080fd5b50565b612256816120ee565b811461226157600080fd5b50565b61226d81612100565b811461227857600080fd5b50565b61228481612144565b811461228f57600080fd5b5056fea2646970667358221220bd2726fc6f2e4a3ebc714385489b52c3384c9ad590cb67aeec984d7c25be9f3664736f6c634300060c0033"

// DeployRepayment deploys a new Ethereum contract, binding an instance of Repayment to it.
func DeployRepayment(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Repayment, error) {
	parsed, err := abi.JSON(strings.NewReader(RepaymentABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RepaymentBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Repayment{RepaymentCaller: RepaymentCaller{contract: contract}, RepaymentTransactor: RepaymentTransactor{contract: contract}, RepaymentFilterer: RepaymentFilterer{contract: contract}}, nil
}

// Repayment is an auto generated Go binding around an Ethereum contract.
type Repayment struct {
	RepaymentCaller     // Read-only binding to the contract
	RepaymentTransactor // Write-only binding to the contract
	RepaymentFilterer   // Log filterer for contract events
}

// RepaymentCaller is an auto generated read-only Go binding around an Ethereum contract.
type RepaymentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RepaymentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RepaymentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RepaymentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RepaymentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RepaymentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RepaymentSession struct {
	Contract     *Repayment        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RepaymentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RepaymentCallerSession struct {
	Contract *RepaymentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RepaymentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RepaymentTransactorSession struct {
	Contract     *RepaymentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RepaymentRaw is an auto generated low-level Go binding around an Ethereum contract.
type RepaymentRaw struct {
	Contract *Repayment // Generic contract binding to access the raw methods on
}

// RepaymentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RepaymentCallerRaw struct {
	Contract *RepaymentCaller // Generic read-only contract binding to access the raw methods on
}

// RepaymentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RepaymentTransactorRaw struct {
	Contract *RepaymentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRepayment creates a new instance of Repayment, bound to a specific deployed contract.
func NewRepayment(address common.Address, backend bind.ContractBackend) (*Repayment, error) {
	contract, err := bindRepayment(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Repayment{RepaymentCaller: RepaymentCaller{contract: contract}, RepaymentTransactor: RepaymentTransactor{contract: contract}, RepaymentFilterer: RepaymentFilterer{contract: contract}}, nil
}

// NewRepaymentCaller creates a new read-only instance of Repayment, bound to a specific deployed contract.
func NewRepaymentCaller(address common.Address, caller bind.ContractCaller) (*RepaymentCaller, error) {
	contract, err := bindRepayment(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RepaymentCaller{contract: contract}, nil
}

// NewRepaymentTransactor creates a new write-only instance of Repayment, bound to a specific deployed contract.
func NewRepaymentTransactor(address common.Address, transactor bind.ContractTransactor) (*RepaymentTransactor, error) {
	contract, err := bindRepayment(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RepaymentTransactor{contract: contract}, nil
}

// NewRepaymentFilterer creates a new log filterer instance of Repayment, bound to a specific deployed contract.
func NewRepaymentFilterer(address common.Address, filterer bind.ContractFilterer) (*RepaymentFilterer, error) {
	contract, err := bindRepayment(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RepaymentFilterer{contract: contract}, nil
}

// bindRepayment binds a generic wrapper to an already deployed contract.
func bindRepayment(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RepaymentABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Repayment *RepaymentRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Repayment.Contract.RepaymentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Repayment *RepaymentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Repayment.Contract.RepaymentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Repayment *RepaymentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Repayment.Contract.RepaymentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Repayment *RepaymentCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Repayment.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Repayment *RepaymentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Repayment.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Repayment *RepaymentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Repayment.Contract.contract.Transact(opts, method, params...)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_Repayment *RepaymentCaller) ADDRESSESPROVIDER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Repayment.contract.Call(opts, &out, "ADDRESSES_PROVIDER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_Repayment *RepaymentSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _Repayment.Contract.ADDRESSESPROVIDER(&_Repayment.CallOpts)
}

// ADDRESSESPROVIDER is a free data retrieval call binding the contract method 0x0542975c.
//
// Solidity: function ADDRESSES_PROVIDER() view returns(address)
func (_Repayment *RepaymentCallerSession) ADDRESSESPROVIDER() (common.Address, error) {
	return _Repayment.Contract.ADDRESSESPROVIDER(&_Repayment.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_Repayment *RepaymentCaller) LENDINGPOOL(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Repayment.contract.Call(opts, &out, "LENDING_POOL")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_Repayment *RepaymentSession) LENDINGPOOL() (common.Address, error) {
	return _Repayment.Contract.LENDINGPOOL(&_Repayment.CallOpts)
}

// LENDINGPOOL is a free data retrieval call binding the contract method 0xb4dcfc77.
//
// Solidity: function LENDING_POOL() view returns(address)
func (_Repayment *RepaymentCallerSession) LENDINGPOOL() (common.Address, error) {
	return _Repayment.Contract.LENDINGPOOL(&_Repayment.CallOpts)
}

// Execute is a paid mutator transaction binding the contract method 0x54f5c2c8.
//
// Solidity: function execute(address _user, bytes _signature, address _sDebtToken, address _vDebtToken, address _dAsset, bytes _packed, bytes _oneInchCalldata) returns()
func (_Repayment *RepaymentTransactor) Execute(opts *bind.TransactOpts, _user common.Address, _signature []byte, _sDebtToken common.Address, _vDebtToken common.Address, _dAsset common.Address, _packed []byte, _oneInchCalldata []byte) (*types.Transaction, error) {
	return _Repayment.contract.Transact(opts, "execute", _user, _signature, _sDebtToken, _vDebtToken, _dAsset, _packed, _oneInchCalldata)
}

// Execute is a paid mutator transaction binding the contract method 0x54f5c2c8.
//
// Solidity: function execute(address _user, bytes _signature, address _sDebtToken, address _vDebtToken, address _dAsset, bytes _packed, bytes _oneInchCalldata) returns()
func (_Repayment *RepaymentSession) Execute(_user common.Address, _signature []byte, _sDebtToken common.Address, _vDebtToken common.Address, _dAsset common.Address, _packed []byte, _oneInchCalldata []byte) (*types.Transaction, error) {
	return _Repayment.Contract.Execute(&_Repayment.TransactOpts, _user, _signature, _sDebtToken, _vDebtToken, _dAsset, _packed, _oneInchCalldata)
}

// Execute is a paid mutator transaction binding the contract method 0x54f5c2c8.
//
// Solidity: function execute(address _user, bytes _signature, address _sDebtToken, address _vDebtToken, address _dAsset, bytes _packed, bytes _oneInchCalldata) returns()
func (_Repayment *RepaymentTransactorSession) Execute(_user common.Address, _signature []byte, _sDebtToken common.Address, _vDebtToken common.Address, _dAsset common.Address, _packed []byte, _oneInchCalldata []byte) (*types.Transaction, error) {
	return _Repayment.Contract.Execute(&_Repayment.TransactOpts, _user, _signature, _sDebtToken, _vDebtToken, _dAsset, _packed, _oneInchCalldata)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] _assets, uint256[] _amounts, uint256[] _premiums, address , bytes _params) returns(bool)
func (_Repayment *RepaymentTransactor) ExecuteOperation(opts *bind.TransactOpts, _assets []common.Address, _amounts []*big.Int, _premiums []*big.Int, arg3 common.Address, _params []byte) (*types.Transaction, error) {
	return _Repayment.contract.Transact(opts, "executeOperation", _assets, _amounts, _premiums, arg3, _params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] _assets, uint256[] _amounts, uint256[] _premiums, address , bytes _params) returns(bool)
func (_Repayment *RepaymentSession) ExecuteOperation(_assets []common.Address, _amounts []*big.Int, _premiums []*big.Int, arg3 common.Address, _params []byte) (*types.Transaction, error) {
	return _Repayment.Contract.ExecuteOperation(&_Repayment.TransactOpts, _assets, _amounts, _premiums, arg3, _params)
}

// ExecuteOperation is a paid mutator transaction binding the contract method 0x920f5c84.
//
// Solidity: function executeOperation(address[] _assets, uint256[] _amounts, uint256[] _premiums, address , bytes _params) returns(bool)
func (_Repayment *RepaymentTransactorSession) ExecuteOperation(_assets []common.Address, _amounts []*big.Int, _premiums []*big.Int, arg3 common.Address, _params []byte) (*types.Transaction, error) {
	return _Repayment.Contract.ExecuteOperation(&_Repayment.TransactOpts, _assets, _amounts, _premiums, arg3, _params)
}
